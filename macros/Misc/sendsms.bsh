cls("SMS");

void sendMessage(message) {
	String varDump(String recipient) {
		String parms = 
			 "sender=4528569086&recipients="
			+recipient
			+"&message="
			+message;
		return String.join("\n",stdOut("curl -X POST -d \""+parms.toString()+"\" "+svr));
	}
	void invokeSendMessage() {
		int chCnt=message.length();
		int[] segCnt = {0,160,306,459};
		if (chCnt > segCnt[segCnt.length-1]) {
			p("Message to long with "+(chCnt-segCnt[segCnt.length-1])+ " characters");
			return;
		}
		int antal = chCnt>segCnt[2] ? 3 : (chCnt > segCnt[1] ?  2 : 1);
		
		actionsDialogGUI(this,NumSeq(new ArrayList(m.keySet()),"rest "+(segCnt[antal]-chCnt)+"/"+antal+"."));
	}
	
	void command(String choice) { // send sms - set message id
		if (confirmYN("sms delivered confirmation",choice)==1 /*no*/)
			return;
		buffer.toggleLocked(view);
		Map sResp = messageResp(m.get(choice));
		//p("back from messageResp()");
		if (sResp.containsKey("SAXException")) {
			p("xml parse errror");
			return;
		}
		String mesId;
		for (String eName :  sendRespTags) {
			if (eName.equals("Message[id]")) {
				mesId = sResp.get(eName);
				//p(mesId);
			}
			else
				p(eName+": "+sResp.get(eName));
		}
		assert(mesId != null,"sensms.bsh:41:no Message[id]");
		if (!isDelivered(mesId))
			appendToFile(ux(sDir()+"/unConfRecIds.xml"));
	}
	
	Map messageRespTest(String recipient) {
		String xmlStr = String.join("\n",readAllLines("/tmp/sendSMSResp.xml"));
		return textByTagNames(xmlStr,sendRespTags);
	}
	Map messageResp(String recipient) {
		String parms = 
			 "sender=4528569086&recipients="
			+recipient
			+"&message="
			+message;
			
		String xmlStr = String.join("\n",stdOut("curl -u " + auth  +" -X POST -d \""+parms.toString()+"\" "+svr+"/messages"));
		//p(xmlStr);
		toFile("/tmp/sendSMSResp.xml",xmlStr);
		//p(sendRespTags);
		Map sResp = textByTagNames(xmlStr,sendRespTags);
		return sResp;
	}
	
	boolean isDelivered(String mesId,boolean printResp) {
		if(printResp)
			p("SMS Delivered info");
		String deliverDoc = String.join("\n",stdOut("curl -u "+ auth +" "+svr+"/messages/" + mesId));
		toFile("/tmp/deliverConfirm.xml",deliverDoc);
		//String deliverDoc = String.join("\n",readAllLines("/tmp/deliverConfirm.xml"));
		deliverResp = textByTagNames(deliverDoc,deliverRespTags);
		if(printResp) {
			//p(swapMap(m));
			//p(deliverResp.get(deliverRespTags.get(0)).replaceAll("\\+",""));     
			p(swapMap(m).get(  deliverResp.get(deliverRespTags.get(0))));
			for (String e : deliverRespTags)
				p((e.indexOf("[") > 0 ? attributeName(e) : elementName(e))
					+": "+deliverResp.get(e));
		}
		return deliverResp.get("MessageRecipient[timeDelivered]").length() > 0;
	}
	boolean isDelivered(String mesId) {
		return isDelivered(mesId,true); 
	}
	
	XThis sp2underscore() { String apply(String s) { return s.replaceAll(" +","_"); }
		return this;
	}

	//Map m=fileLinesHashTable(scriptPath,"recipients");
	Map m = swapMap(propsFromFile(ux(sDir()+"/phoneNumbers.props")),sp2underscore());
	List sendRespTags = asList("Message[id]","acceptedRecipientCount","erroneousRecipientCount","cost","newBalance");
	List deliverRespTags = asList("MessageRecipient[number]","MessageRecipient[erroneous]","MessageRecipient[timeSent]","MessageRecipient[timeDelivered]","message");
	auth = inputAssistedProperty("sms.auth", "Specify username:password \n- with colon between username and password\n- but no spaces anywhere");
	svrofsvr=inputAssistedProperty("sms.svrwithsvrrec","Specify the server which DNS svr record\nholds the name of the server\nthat facilitates the api of the sms gateway");
	//String svr ="http://ipa/parm.php";
	String svr = "https://"+stdOut("dig +short " + svrofsvr + " srv").get(0).replaceAll("^[\\d ]+","").replaceAll("\\.$","");
	invokeSendMessage();
	
}
if (buffer.isLocked())
	statMes("Might have been sendt (locked!)");
else
	sendMessage(URLEncoder.encode(textArea.getText().trim(),"UTF-8"));
